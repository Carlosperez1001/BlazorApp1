@page "/"
@using ThingMagic
@using RFID_DataAccessLibrary
@using RFID_DataAccessLibrary.models
@using System;
@using System.Diagnostics;
@using System.IO;
@using System.Threading



<!--------------------------------------------      HTML Block        ------------------------------->
<div style="display:flex; justify-content:space-between;">
    <h1>Inventory Management System RFID</h1>
    <h1 class="error" style="color:red"> @ErrorMessage</h1>
    <svg id="Icon_ConnectiveStatus" height="100" width="100" style="float:right;  ">
        <circle cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="@StyleSVG" />
        <text x="50%" y="50%" text-anchor="middle" fill="black">@StyleSVGMessage</text>
    </svg>
</div>
<div class="COM_container">
    <div style="display: flex;flex-direction: column; @StyleSelect">
        <select id="COM_PORT" @bind="selectedValue">
            <option value="1" selected="selected">Com 1</option>
            <option value="2">Com 2</option>
            <option value="3">Com 3</option>
            <option value="4">Com 4</option>
            <option value="5">Com 5</option>
            <option value="6">Com 6</option>
            <option value="7">Com 7</option>
        </select>
        <button class="btn btn-primary" @onclick="onClick_btnConnect" disabled="@StyleBtnConnect"> Connect</button>
        <p>Current status: @currentStatusLBL</p>
    </div>

</div>
<div style="display:flex; justify-content:space-between;">
    <button class="btn btn-primary" @onclick="btn_StartScanning_Click">@btn_connect</button>
    <button class="btn btn-primary" @onclick="btn_ClearList">Clear List</button>
</div>

<table class="table table-striped">
    <thead>
        <tr>


            <th>EPC</th>
            <th>TimeStamp</th>
            <th>RSSI</th>
        </tr>
    </thead>
    <tbody>
        @if (items != null)
        {
            @foreach (var item in items)
            {
                <tr>
                    <td>@item.EPC</td>

                    <td>@item.RSSI</td>

                    <td>@item.TimeStamp</td>
                </tr>
            }
        }
    </tbody>

</table>


<button class="btn btn-primary">Add RFID Tag</button>


<!--------------------------------------------      C# Block        ------------------------------->
@code {

    //CSS Properities 
    string ErrorMessage;
    string StyleSVG = "red";
    private string StyleSVGMessage = "Disconnect";
    string StyleSelect;
    private string currentStatusLBL = "Disconnect";
    private string btn_connect = "Start reading";
    private bool StyleBtnConnect;
    public int COM_Port = 0;
    public int selectedValue;

    //RFID Properities 
    private List<UnknownItemData> items;
    public string EPC { get; private set; }
    public string timeStamp { get; private set; }
    public string RSSI { get; private set; }


    //READER Properities 
    public bool toggelReader = false;
    public bool connectiveStatus = false;
    public ThingMagic.Reader reader;

    //Prepare the webapp to connect the RFID Device 
    public void onClick_btnConnect()
    {
        currentStatusLBL = selectedValue.ToString();
        COM_Port = selectedValue;
        ConnectRFID();
    }

    //Connect the webapp with the RFID Device
    public void ConnectRFID()
    {
        {
            try
            {

                string uri = "eapi:///com" + COM_Port;                                              //Configurations of COMs "USB Port"
                reader = ThingMagic.Reader.Create(uri);                                             //Create Reader object

                reader.Connect();

                StyleBtnConnect = true;                                                             //Disable connect BTN

                reader.ParamSet("/reader/region/id", ThingMagic.Reader.Region.NA);

                int readPowerMax = (int)reader.ParamGet("/reader/radio/powerMax");
                int readPowerMin = (int)reader.ParamGet("/reader/radio/powerMin");

                Console.WriteLine("Max= " + readPowerMax);
                Console.WriteLine("Min= " + readPowerMin);
                reader.ParamSet("/reader/radio/readPower", 2000);
                int[] antennaList = null;
                string str = "1,1";
                antennaList = Array.ConvertAll(str.Split(','), int.Parse);                                   //Select antenna 1

                SimpleReadPlan plan = new SimpleReadPlan(antennaList, TagProtocol.GEN2, null, null, 1000);  //Create "Plan" for module configuration
                reader.ParamSet("/reader/read/plan", plan);

                connectiveStatus = true;
                updateConnectiveStatus();                                                                    //Update UI
                currentStatusLBL = "Device is connected to " + COM_Port + ".";
                StyleSVG = "yellow";
                StyleSVGMessage = "IDLE";
            }
            catch (System.IO.IOException e)
            {
                Console.WriteLine(e.Message);
                ErrorMessage = "Port " + COM_Port + " is not valid";

            }
        }

    }


    public void updateConnectiveStatus()
    {
        if (connectiveStatus == true)
        {
            StyleSVG = "yellow";

            if (toggelReader == true)
            {

            }
            else
            {

                StyleSVG = "red";

            }
        }
    }

    private void btn_StartScanning_Click()
    {
        if (toggelReader == false && connectiveStatus == true)
        {


            if (reader == null)
            {
                ConnectRFID();

            }
            toggelReader = true;
            ReadBatchRFID();
            updateConnectiveStatus();
            ErrorMessage = "";
            btn_connect = "Stop Reading";
            StyleSVG = "green";
            StyleSVGMessage = "Reading";
        }
        else if (toggelReader == true && connectiveStatus == true)
        {

            toggelReader = false;
            updateConnectiveStatus();
            ErrorMessage = "";
            btn_connect = "Start Reading";
            reader.Destroy();
            reader = null;
            StyleSVG = "yellow";
            StyleSVGMessage = "IDLE";
        }
        else
        {
            connectiveStatus = false;
            ErrorMessage = "M6e is not connected properly. Please select the correct COM port that connects the M6e module";
        }
    }

    public void ReadBatchRFID()
    {


        if (connectiveStatus == true && toggelReader == true)
        {
            try
            {
                reader.StartReading();
                reader.TagRead += OnTagRead;
            }
            catch (System.IO.IOException e)
            {
                ErrorMessage = e.Message + "111";

            }
        }

    }




    private void OnTagRead(Object sender, TagReadDataEventArgs e)
    {

        bool check_Unknown = false;

        currentStatusLBL = e.TagReadData.Tag.ToString();
        InvokeAsync(() =>
        {
            if (toggelReader == false)
            {

                reader.StopReading();
                return;
            }
            ErrorMessage = e.TagReadData.EpcString;

            this.StateHasChanged();

            check_Unknown = UnknownItemData.CheckList(e);
            items = UnknownItemData.getUnknownRFIDList();
        });
    }



    private void ShowAlert(string message)
    {

        Console.WriteLine("ShowAlert", message);
    }

    public void btn_ClearList()
    {
        items.Clear();

    }




}
